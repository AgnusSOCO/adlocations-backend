import postgres from "postgres";
import { InsertAdLocation, InsertLandlord, InsertClient, InsertStructure } from "../drizzle/schema.js";
export declare function getDb(): Promise<import("drizzle-orm/postgres-js").PostgresJsDatabase<Record<string, unknown>> & {
    $client: postgres.Sql<{}>;
}>;
export declare function getUserByAuthUserId(authUserId: string): Promise<{
    id: number;
    authUserId: string;
    name: string;
    email: string;
    loginMethod: string;
    role: "user" | "admin" | "sales_rep" | "maintenance" | "viewer";
    createdAt: Date;
    updatedAt: Date;
    lastSignedIn: Date;
}>;
export declare function upsertUserFromAuth(data: {
    authUserId: string;
    email: string | null;
    name: string | null;
    role?: string;
}): Promise<void>;
export declare function getAllAdLocations(): Promise<{
    id: number;
    title: string;
    address: string;
    latitude: string;
    longitude: string;
    dimensions: string;
    type: "billboard" | "poster" | "digital" | "transit" | "street_furniture" | "other";
    material: string;
    hasVinyl: number;
    photos: string;
    mapLink: string;
    availabilityStatus: "maintenance" | "pending" | "available" | "occupied";
    priceEstimate: number;
    notes: string;
    landlordId: number;
    createdAt: Date;
    updatedAt: Date;
}[]>;
export declare function getAdLocationById(id: number): Promise<{
    id: number;
    title: string;
    address: string;
    latitude: string;
    longitude: string;
    dimensions: string;
    type: "billboard" | "poster" | "digital" | "transit" | "street_furniture" | "other";
    material: string;
    hasVinyl: number;
    photos: string;
    mapLink: string;
    availabilityStatus: "maintenance" | "pending" | "available" | "occupied";
    priceEstimate: number;
    notes: string;
    landlordId: number;
    createdAt: Date;
    updatedAt: Date;
}>;
export declare function createAdLocation(data: InsertAdLocation): Promise<postgres.RowList<never[]>>;
export declare function updateAdLocation(id: number, data: Partial<InsertAdLocation>): Promise<{
    id: number;
    title: string;
    address: string;
    latitude: string;
    longitude: string;
    dimensions: string;
    type: "billboard" | "poster" | "digital" | "transit" | "street_furniture" | "other";
    material: string;
    hasVinyl: number;
    photos: string;
    mapLink: string;
    availabilityStatus: "maintenance" | "pending" | "available" | "occupied";
    priceEstimate: number;
    notes: string;
    landlordId: number;
    createdAt: Date;
    updatedAt: Date;
}>;
export declare function deleteAdLocation(id: number): Promise<{
    success: boolean;
}>;
export declare function getAllLandlords(): Promise<{
    id: number;
    name: string;
    email: string;
    phone: string;
    company: string;
    rentalSite: string;
    contractStartDate: Date;
    contractEndDate: Date;
    rentAmount: number;
    paymentStatus: "paid" | "pending" | "overdue";
    notes: string;
    createdAt: Date;
    updatedAt: Date;
}[]>;
export declare function getLandlordById(id: number): Promise<{
    id: number;
    name: string;
    email: string;
    phone: string;
    company: string;
    rentalSite: string;
    contractStartDate: Date;
    contractEndDate: Date;
    rentAmount: number;
    paymentStatus: "paid" | "pending" | "overdue";
    notes: string;
    createdAt: Date;
    updatedAt: Date;
}>;
export declare function createLandlord(data: InsertLandlord): Promise<postgres.RowList<never[]>>;
export declare function updateLandlord(id: number, data: Partial<InsertLandlord>): Promise<{
    id: number;
    name: string;
    email: string;
    phone: string;
    company: string;
    rentalSite: string;
    contractStartDate: Date;
    contractEndDate: Date;
    rentAmount: number;
    paymentStatus: "paid" | "pending" | "overdue";
    notes: string;
    createdAt: Date;
    updatedAt: Date;
}>;
export declare function deleteLandlord(id: number): Promise<{
    success: boolean;
}>;
export declare function getAllClients(): Promise<{
    id: number;
    name: string;
    email: string;
    phone: string;
    company: string;
    adRentedId: number;
    rentalStartDate: Date;
    rentalEndDate: Date;
    rentAmount: number;
    paymentStatus: "paid" | "pending" | "overdue";
    accountStatus: "active" | "inactive" | "suspended";
    assignedSalesRepId: number;
    notes: string;
    createdAt: Date;
    updatedAt: Date;
}[]>;
export declare function getClientById(id: number): Promise<{
    id: number;
    name: string;
    email: string;
    phone: string;
    company: string;
    adRentedId: number;
    rentalStartDate: Date;
    rentalEndDate: Date;
    rentAmount: number;
    paymentStatus: "paid" | "pending" | "overdue";
    accountStatus: "active" | "inactive" | "suspended";
    assignedSalesRepId: number;
    notes: string;
    createdAt: Date;
    updatedAt: Date;
}>;
export declare function createClient(data: InsertClient): Promise<postgres.RowList<never[]>>;
export declare function updateClient(id: number, data: Partial<InsertClient>): Promise<{
    id: number;
    name: string;
    email: string;
    phone: string;
    company: string;
    adRentedId: number;
    rentalStartDate: Date;
    rentalEndDate: Date;
    rentAmount: number;
    paymentStatus: "paid" | "pending" | "overdue";
    accountStatus: "active" | "inactive" | "suspended";
    assignedSalesRepId: number;
    notes: string;
    createdAt: Date;
    updatedAt: Date;
}>;
export declare function deleteClient(id: number): Promise<{
    success: boolean;
}>;
export declare function getAllStructures(): Promise<{
    id: number;
    adLocationId: number;
    maintenanceStatus: "good" | "needs_attention" | "critical";
    licenseFileUrl: string;
    licenseExpiryDate: Date;
    lastMaintenanceDate: Date;
    nextMaintenanceDate: Date;
    technicianNotes: string;
    createdAt: Date;
    updatedAt: Date;
}[]>;
export declare function getStructureById(id: number): Promise<{
    id: number;
    adLocationId: number;
    maintenanceStatus: "good" | "needs_attention" | "critical";
    licenseFileUrl: string;
    licenseExpiryDate: Date;
    lastMaintenanceDate: Date;
    nextMaintenanceDate: Date;
    technicianNotes: string;
    createdAt: Date;
    updatedAt: Date;
}>;
export declare function getStructureByAdLocationId(adLocationId: number): Promise<{
    id: number;
    adLocationId: number;
    maintenanceStatus: "good" | "needs_attention" | "critical";
    licenseFileUrl: string;
    licenseExpiryDate: Date;
    lastMaintenanceDate: Date;
    nextMaintenanceDate: Date;
    technicianNotes: string;
    createdAt: Date;
    updatedAt: Date;
}>;
export declare function createStructure(data: InsertStructure): Promise<postgres.RowList<never[]>>;
export declare function updateStructure(id: number, data: Partial<InsertStructure>): Promise<{
    id: number;
    adLocationId: number;
    maintenanceStatus: "good" | "needs_attention" | "critical";
    licenseFileUrl: string;
    licenseExpiryDate: Date;
    lastMaintenanceDate: Date;
    nextMaintenanceDate: Date;
    technicianNotes: string;
    createdAt: Date;
    updatedAt: Date;
}>;
export declare function deleteStructure(id: number): Promise<{
    success: boolean;
}>;
//# sourceMappingURL=db.d.ts.map